#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<malloc.h>
#include<windows.h>
#include<iostream.h>

typedef struct
{
	unsigned int weight;
	unsigned int parent,lchild,rchild;
}HTNode,*HuffmanTree;

typedef char **HuffmanCode;

void Select(HuffmanTree HT,int i,int &s1)
{
	int temp1=1,j;
	while(HT[temp1].parent!=0) temp1++;
	
	for(j=temp1;j<=i;j++)
	{		
		if(HT[j].parent==0)
		{
			temp1=HT[temp1].weight<HT[j].weight?temp1:j;
		}
	}
	s1=temp1;

}

void inputchar(int &num,int *&w)       //注意这里的指针形参！！！
{
	printf("请输入编码字符的个数:");
	scanf("%d",&num);
	w=(int *)malloc(num*sizeof(int));
	printf("请依次输入%d个对应权值（空格为间隔）:",num);
	for(int i=1;i<=num;i++)
	{
		scanf("%d",&w[i-1]);
		//printf("%d ",w[i-1]);
	}
}

void HuffmanCoding(HuffmanTree &HT, HuffmanCode &HC, int *w, int n) 
{
  // 算法6.12
  // w存放n个字符的权值(均>0)，构造哈夫曼树HT，
  // 并求出n个字符的哈夫曼编码HC
  int i, j, m, s1, s2, start;
  char *cd;
  unsigned int c, f;

  if (n<=1) return;
  m = 2 * n - 1;
  HT = (HuffmanTree)malloc((m+1) * sizeof(HTNode));  // 0号单元未用

  for (i=1; i<=n; i++){ //初始化
    HT[i].weight=w[i-1];
    HT[i].parent=0;
    HT[i].lchild=0;
    HT[i].rchild=0;
  }
  for (i=n+1; i<=m; i++) { //初始化
    HT[i].weight=0;
    HT[i].parent=0;
    HT[i].lchild=0;
    HT[i].rchild=0;
  }

  /*
  printf("\n哈夫曼树的构造过程如下所示：\n");
  printf("HT初态:\n  结点  weight  parent  lchild  rchild");
  for (i=1; i<=m; i++)
    printf("\n%4d%8d%8d%8d%8d",i,HT[i].weight,HT[i].parent,HT[i].lchild, HT[i].rchild);
  system("pause");
  */

  for (i=n+1; i<=m; i++) {  // 建哈夫曼树
    // 在HT[1..i-1]中选择parent为0且weight最小的两个结点，
    // 其序号分别为s1和s2。
    Select(HT, i-1, s1);
    HT[s1].parent = i;  
	Select(HT, i-1, s2);
	HT[s2].parent = i;
    HT[i].lchild = s1;  HT[i].rchild = s2;
    HT[i].weight = HT[s1].weight + HT[s2].weight;

    /*
	printf("\nselect: s1=%d   s2=%d\n", s1, s2);
    printf("  结点  weight  parent  lchild  rchild");
    for (j=1; j<=i; j++)
    printf("\n%4d%8d%8d%8d%8d",j,HT[j].weight,HT[j].parent,HT[j].lchild, HT[j].rchild);
    system("pause");
	*/
  }

  //--- 从叶子到根逆向求每个字符的哈夫曼编码 ---
  HC=(HuffmanCode)malloc((n+1)*sizeof(char*));
  cd = (char *)malloc(n*sizeof(char));    // 分配求编码的工作空间
  cd[n-1] = '\0';                         // 编码结束符。
  for (i=1; i<=n; ++i) 
  {                  // 逐个字符求哈夫曼编码
    start = n-1;                          // 编码结束符位置
    for (c=i, f=HT[i].parent; f!=0; c=f, f=HT[f].parent) 
      // 从叶子到根逆向求编码
      if (HT[f].lchild==c) cd[--start] = '0';
      else cd[--start] = '1';
    HC[i] = (char *)malloc((n-start)*sizeof(char)); 
         // 为第i个字符编码分配空间
    strcpy(HC[i], &cd[start]);    // 从cd复制编码(串)到HC
  }
  free(cd);   // 释放工作空间
} // HuffmanCoding

void displayHuffmancode(HuffmanCode HC,int n)
{
	for(int i=1;i<=n;i++)
	{
		printf("%d:",i);printf("%s",HC[i]);
		printf("\n");
	}
}

void codingHT(HuffmanCode HC)
{
	int i,j,n=0;
	char a[50];

		printf("\n请输入将要编码数字:");

		scanf("%s",a);
		while(a[n]!='\0') n++;  //求输入的字符的个数

		printf("Huffman编码后:");
		for(i=0;i<n;i++) 
		{
			j=a[i]-'0';
			printf("%s",HC[j]);
		}
}

void translateHT(HuffmanCode HC,HuffmanTree HT)
{
	int n=0,i,head=1,p;
	char a[50];
	printf("\n请输入Huffman编码:");
	scanf("%s",a);
	while(a[n]!='\0') n++;

	while(HT[head].parent!=0) head++;

	printf("译码后:");
	p=head;
	for(i=1;i<=n;i++)
	{
		if((a[i-1]-'0')==0) 
		{
			p=HT[p].lchild;
			if(HT[p].lchild==0) {printf("%d",p);p=head;}
		}
		else 
		{
			p=HT[p].rchild;
			if(HT[p].lchild==0) {printf("%d",p);p=head;}
		}
	}
	cout<<endl;
}

void main()
{
	HuffmanTree HT;
	HuffmanCode HC;
    int num,*w;

	inputchar(num,w);
	HuffmanCoding(HT,HC, w, num);
	cout<<endl;
	displayHuffmancode(HC,num);
	fflush(stdin); //清除输入缓存
	while(1) 
	{
		codingHT(HC);
		translateHT(HC,HT);
	}


}