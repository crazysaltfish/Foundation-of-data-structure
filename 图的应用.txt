#include <stdio.h>
#include "iostream.h"
#include <stdlib.h>
#include <queue>
#define Status int
#define InfoType int
#define INFINITY '0'
#define MAX_VERTEX_NUM 20
#define VRType char
#define VertexType char
using namespace std;
bool visited[MAX_VERTEX_NUM];

typedef enum{DG,DN,UDG,UDN} GraphKind;

typedef struct ArcCell{

	VRType adj;
	InfoType info;
}ArcCell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];

typedef struct{
    VertexType vexs[MAX_VERTEX_NUM];
	AdjMatrix arcs;
	int vexnum,arcnum;
	GraphKind kind;
}MGraph;


int LocateVex(MGraph G,VertexType v)
{
	int flag = 0,locate;

    for(int i = 0; i < G.vexnum; i++)
    {
		 if(G.vexs[i] == v)
		 { 
			 flag = 1;
			 locate = i;
		 }
			
	 }
	if(flag == 1) return locate;
	else return -1;

}

Status CreateDN(MGraph &G)
{
    int IncInfo,i,j;
	cout<<"请输入图的顶点数、弧数、弧是否含有信息"<<endl;
	cin>>G.vexnum>>G.arcnum>>IncInfo;

	for( i = 0; i < G.vexnum; i++)
	{
		cout<<"请输入顶点信息:";
		cin>>G.vexs[i];
	}

	for( i = 0; i<G.vexnum; i++)
       for( j = 0; j<G.vexnum; j++)
	   {
		   G.arcs[i][j].adj = INFINITY;
		   if(i == j)
		     G.arcs[i][j].info = 0;
		   else
		     G.arcs[i][j].info = 65525;
	   }

	 for(int k = 0; k < G.arcnum; k++)
	 {
		 VertexType v1,v2; int i = -1,j = -1;
		 cout<<"请输入弧的两个顶点:";
         cin>>v1>>v2;
         i = LocateVex(G,v1);   j = LocateVex(G,v2);
		 if(i != -1 && j != -1) G.arcs[i][j].adj = '1';
		 if(IncInfo) {
			 cout<<"请输入弧的权值信息:";
		     cin>>G.arcs[i][j].info;
		 }
	 }
	 return 1;

}

Status CreateUDN(MGraph &G)
{
	int IncInfo,i;
	cout<<"请输入图的顶点数、弧数、弧是否含有信息"<<endl;
	cin>>G.vexnum>>G.arcnum>>IncInfo;

	for( i = 0; i < G.vexnum; i++)
	{
		cout<<"请输入顶点信息:";
		cin>>G.vexs[i];
	}

	for( i = 0; i<G.vexnum; i++)
       for(int  j = 0; j<G.vexnum; j++)
	   {
		   G.arcs[i][j].adj = INFINITY;
		   if(i == j)
		     G.arcs[i][j].info = 0;
		   else
		     G.arcs[i][j].info = 65525;
	   }

	 for(int k = 0; k < G.arcnum; k++)
	 {
		 VertexType v1,v2; int i = -1,j = -1;
		 cout<<"请输入弧的两个顶点:";
         cin>>v1>>v2;
         i = LocateVex(G,v1);   j = LocateVex(G,v2);
		 if(i != -1 && j != -1) G.arcs[i][j].adj = '1';
		 if(IncInfo) {
			 cout<<"请输入弧的权值信息:";		 
			 cin>>G.arcs[i][j].info;
		 }
		 G.arcs[j][i] = G.arcs[i][j];
	 }
     return 1;
}
Status CreateGraph(MGraph &G){

	cout<<"请选择图的类型:0.DG,1.DN,2.UDG,3.UDN"<<endl;
    scanf("%d",&G.kind);
	switch (G.kind){
	case DN:
		CreateDN(G);
		break;
	case UDN:
		CreateUDN(G);
		break;
	   default: return 0;
	} 

}
typedef struct {
	   VertexType adjvex;
	   int lowcost;
	}Closedge[MAX_VERTEX_NUM];

int minimum(Closedge closedge,int num)
{
	int position,min;
	min = 65525;
	position = 0;
   for(int i = 1; i < num; i++)
   {
      if(closedge[i].lowcost > 0 && closedge[i].lowcost < min)
	  { 
		  position = i;
		  min = closedge[i].lowcost;
	  }
   }

   return position;
}


void MiniSpanTree_PRIM(MGraph G, VertexType u)
{ 
    Closedge closedge;
	int k ;
	k = LocateVex(G,u);
	int j,i ;
	for(j = 0; j < G.vexnum; ++j)
	  if(j != k)
	  {
		  closedge[j].adjvex = u;
		  closedge[j].lowcost = G.arcs[k][j].info;
	  }//for-if
	closedge[k].lowcost = 0;
	
	for(i = 1; i < G.vexnum; i++)
	{
		k = minimum(closedge,G.vexnum);

		cout<<closedge[k].adjvex<<" "<<G.vexs[k]<<endl;
		closedge[k].lowcost = 0;
		for(j = 0; j < G.vexnum; ++j)
		{
			if(G.arcs[k][j].adj < closedge[j].lowcost)
			{
				closedge[j].adjvex = G.vexs[k];
                closedge[j].lowcost = G.arcs[k][j].info;
			}
		}//for-if
	}//for
	
}

void main()
{
	MGraph map1;
	CreateGraph(map1);
    MiniSpanTree_PRIM(map1,'a'); 
}







/*――――――――――――――――――――――――――――


/*―――――――――――――――――――――――――――
#include <stdio.h>
#include "iostream.h"
#include <stdlib.h>
#include <queue>
#include <stack>
#define Status int
#define MAX_VERTEX_NUM 20
#define InfoType int
#define VertexType char
#define MAX 20

using namespace std;

bool visited[MAX];

typedef enum{DG,DN,UDG,UDN} GraphKind;
typedef struct ArcNode{

	int adjvex;
	struct ArcNode *nextarc;
    InfoType info;
}ArcNode;

typedef struct VNode{
  VertexType data;
  ArcNode *firstarc;
}VNode,AdjList[MAX_VERTEX_NUM];

typedef struct{
   AdjList vertices;
   int vexnum,arcnum;
   GraphKind kind;
}MGraph;


int LocateVex(MGraph G,VertexType v)
{
	int flag = 0,locate;

    for(int i = 0; i < G.vexnum; i++)
    {
		 if(G.vertices[i].data == v)
		 { 
			 flag = 1;
			 locate = i;
		 }
			
	 }
	if(flag == 1) return locate;
	else return -1;

}


Status CreateDN(MGraph &G)
{
	int IncInfo,i;
	cout<<"请输入图的顶点数、弧数、弧是否含有信息"<<endl;
	cin>>G.vexnum>>G.arcnum>>IncInfo;
    
	for( i = 0; i < G.vexnum; i++)
	{
		cout<<"请输入顶点信息:";
		cin>>G.vertices[i].data;
	}

	for(i = 0; i< G.vexnum; i++)
	{
		int num;
	    cout<<G.vertices[i].data<<"顶点相关的弧的数目:";
		    cin>>num;
	    G.vertices[i].firstarc = NULL;
        VertexType data;
		ArcNode *p,*q;
		int location;
		for(int j = 0; j < num; j++)
		{
			p = (ArcNode *)malloc(sizeof(struct ArcNode));
		    cout<<"其中一条弧指向的顶点:";
			cin>>data;
            location = LocateVex(G,data);
			if(location != -1)  p->adjvex = location;
			if(j == 0) G.vertices[i].firstarc = p;
			  else q->nextarc = p;
			q = p;
			p->nextarc = NULL;

			if(IncInfo) {
			   cout<<"请输入弧的权值信息:";
			   int weight;
			   cin>>weight;
			   p->info = weight;
			}
		}
	}
	return 1;		
}
void FindInDegree(MGraph G,int indegree[])
{
	for(int i = 0; i < G.vexnum; i ++)
	{
       ArcNode *p;
	   int num = 0;
       for(int j = 0 ; j < G.vexnum; ++j){
	   p = G.vertices[j].firstarc;
	   while(p)
	   {
		   if(p->adjvex == i)
		      ++num;
		   p = p->nextarc;
	   }//while
	   
	   }//for
	   indegree[i] = num; 
	} 
   
}

Status TopologicalSort(MGraph G)
{
	cout<<"拓扑排序为:"<<endl;
	int indegree[MAX_VERTEX_NUM];
    FindInDegree(G,indegree);

	stack<int> S;
	int i,k;
	for(i = 0; i < G.vexnum; ++i)
	{
		if(!indegree[i])
			S.push(i);
	}
	int count = 0;
	while(!S.empty())
	{
		i = S.top();
		S.pop();
		cout<<i<<" "<<G.vertices[i].data<<endl;
		++count;
        ArcNode *p;

		for(p = G.vertices[i].firstarc; p ; p = p->nextarc)
		{
			k = p->adjvex;
			if(!(--indegree[k]))
				S.push(k);
		}//for
	}//while

	if(count < G.vexnum) return 0;
	else return 1;
}
int ve[MAX_VERTEX_NUM];
Status TopologicalOrder(MGraph G,stack<int> &T)
{
   int indegree[MAX_VERTEX_NUM],i,j,k;  stack<int> S;
   FindInDegree(G,indegree);
   int count = 0;
   for(i = 0; i < G.vexnum; i ++)
   {
	   if(indegree[i] == 0)
		   S.push(i);
   }
   for(i = 0 ; i < G.vexnum; ++i)
      ve[i] = 0;

   while(!S.empty())
   {
      j = S.top();
	  S.pop();
	  T.push(j);
	  ++count;
	  ArcNode *p;

	  for(p = G.vertices[j].firstarc; p ; p = p->nextarc)
	  {
         k = p->adjvex;
		 if(--indegree[k] == 0)  S.push(k);
		 if(ve[j] + p->info > ve[k])  ve[k] = ve[j]+ p->info;
	  }//for
   }//while

   if(count < G.vexnum)  return 0;
   else return 1;
}

Status CriticalPath(MGraph G)
{
	cout<<"关键路径为:"<<endl;
	stack<int> T;
	if(!TopologicalOrder(G,T))  return 0;
	
	int vl[MAX_VERTEX_NUM],i,j,k,dut;  ArcNode *p;
	for(i = 0 ; i < G.vexnum; i++)
		vl[i] = ve[i];

	while(!T.empty())
	{
       for(j = T.top(),T.pop(),p = G.vertices[j].firstarc;  p ; p = p->nextarc)
	   {
         k = p->adjvex; dut = p->info;
		 if(vl[k] - dut < vl[j])  vl[j] = vl[k] - dut;
	   }//for
	}//while

	for(j = 0 ; j < G.vexnum; j ++)
		for(p = G.vertices[j].firstarc; p ; p = p->nextarc)
		{
			k = p->adjvex;
			dut = p->info;
			int ee,el; char tag;
			ee = ve[j];  el = vl[k]-dut;
            tag = (ee == el)?'*':' ';
			cout<<G.vertices[j].data<<" "<<G.vertices[k].data<<" "<<dut<<" "<<tag<<endl;
		}

		return 1;
}

void main()
{
	MGraph map1;
	CreateDN(map1);
	TopologicalSort(map1);
    CriticalPath(map1);

}	
