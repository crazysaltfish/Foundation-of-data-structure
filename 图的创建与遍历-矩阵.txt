
//邻接矩阵
#include <stdio.h>
#include "iostream.h"
#include <stdlib.h>
#include <queue>
#define Status int
#define InfoType int
#define INFINITY '*'
#define MAX_VERTEX_NUM 20
#define VRType char
#define VertexType char
using namespace std;
bool visited[MAX_VERTEX_NUM];

typedef enum{DG,UDG} GraphKind;

typedef struct ArcCell{

	VRType adj;
	InfoType *info;
}ArcCell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];

typedef struct{
    VertexType vexs[MAX_VERTEX_NUM];
	AdjMatrix arcs;
	int vexnum,arcnum;
	GraphKind kind;
}MGraph;


int LocateVex(MGraph G,VertexType v)
{
	int flag = 0,locate;

    for(int i = 0; i < G.vexnum; i++)
    {
		 if(G.vexs[i] == v)
		 { 
			 flag = 1;
			 locate = i;
		 }
			
	 }
	if(flag == 1) return locate;
	else return -1;

}

Status CreateDG(MGraph &G)
{
    int IncInfo,i;
	cout<<"请输入图的顶点数、弧数、弧是否含有信息"<<endl;
	cin>>G.vexnum>>G.arcnum>>IncInfo;

	printf("请输入%d个顶点信息（不加空格）：", G.vexnum);
	for( i = 0; i < G.vexnum; i++)
	{
		cin>>G.vexs[i];
	}

	for( i = 0; i<G.vexnum; i++)
       for(int  j = 0; j<G.vexnum; j++)
	   {
		   G.arcs[i][j].adj = INFINITY;
		   G.arcs[i][j].info = NULL;
	   }

 	 printf("请输入%d条弧（空格为间隔）：",G.arcnum);
	 for(int k = 0; k < G.arcnum; k++)
	 {
		 VertexType v1,v2; int i = -1,j = -1;
         cin>>v1>>v2;
         i = LocateVex(G,v1);   j = LocateVex(G,v2);
		 if(i != -1 && j != -1) G.arcs[i][j].adj = '1';
		 if(IncInfo) cin>>*G.arcs[i][j].info;
	 }
	 return 1;

}

Status CreateUDG(MGraph &G)
{
	int IncInfo,i;
	cout<<"请输入图的顶点数、弧数、弧是否含有信息"<<endl;
	cin>>G.vexnum>>G.arcnum>>IncInfo;

	for( i = 0; i < G.vexnum; i++)
	{
		cout<<"请输入顶点信息:";
		cin>>G.vexs[i];
	}

	for( i = 0; i<G.vexnum; i++)
       for(int  j = 0; j<G.vexnum; j++)
	   {
		   G.arcs[i][j].adj = INFINITY;
		   G.arcs[i][j].info = NULL;
	   }

	 for(int k = 0; k < G.arcnum; k++)
	 {
		 VertexType v1,v2; int i = -1,j = -1;
		 cout<<"请输入弧的两个顶点:";
         cin>>v1>>v2;
         i = LocateVex(G,v1);   j = LocateVex(G,v2);
		 if(i != -1 && j != -1) G.arcs[i][j].adj = '1';
		 if(IncInfo) cin>>*G.arcs[i][j].info;
		 G.arcs[j][i] = G.arcs[i][j];
	 }
     return 1;
}

Status PrintArcs(MGraph G)
{
   for(int i = 0; i < G.vexnum ; i++)
   {
	   for(int j = 0; j < G.vexnum; j++)
	   {
		   cout<<G.arcs[i][j].adj<<" ";
	   }
	   cout<<endl;
   }

   return 1;
}

Status CreateGraph(MGraph &G){

	cout<<"请选择图的类型:0.DG,1.UDG"<<endl;
    scanf("%d",&G.kind);
	switch (G.kind){
	case DG:
		CreateDG(G);
		break;
	case UDG:
		CreateUDG(G);
		break;
	   default: return 0;
	} 

}

int FirstAdjVex(MGraph G,int v)
{
	int i,j,flag = 0;

	for(i = 0; i < G.vexnum; i++)
	{
		if(G.arcs[v][i].adj != '*'){
			flag = 1;
			break;
		}
	}
    if(flag == 1)  return i;
	else return -1;
}

int NextAdjVex(MGraph G, int v, int w)
{
	int i,flag = 0;
	for(i = w; i < G.vexnum; i++)
	{
		if(G.arcs[v][i].adj != '*' && i != w){
		    flag = 1;
			break;
		}
	}
	if(flag == 1)   return i;
	else return -1;
}

void DFS(MGraph G,int v)
{
	int w;
	visited[v] = true;
	cout<<G.vexs[v]<<" ";

	for(w = FirstAdjVex(G,v); w > 0; )
	{
	   if(!visited[w])
		   DFS(G,w);
	   w = NextAdjVex(G,v,w);
	}
}

void DFSTraverse(MGraph G)
{
	int v;
    
	cout<<"深度优先遍历为:";
	for(v = 0; v < G.vexnum; v++)  
		visited[v] = false;
	for(v = 0; v < G.vexnum; v++)
		if(!visited[v])
			DFS(G,v);

	cout<<endl;
}


void BFSTraverse(MGraph G)
{
	int v,u,w;

	cout<<"广度优先遍历为:";

	for(v = 0; v < G.vexnum; v++)
		visited[v] = false;

	queue<int> Q;

	for(v = 0; v < G.vexnum; v++)
	{
		if(!visited[v]){
		   visited[v] = true;
		   cout<<G.vexs[v]<<" ";
		   Q.push(v);

		   while(!Q.empty()){
		      u = Q.front();
			  Q.pop();

			  for(w = FirstAdjVex(G,u); w >= 0; w = NextAdjVex(G,u,w))
			  {
				  if(!visited[w])
				  {
					  visited[w] = true;
					  cout<<G.vexs[w]<<" ";
					  Q.push(w);
				  }
			  }
		   }
		}
	}
	cout<<endl;
}

Status InsertVex(MGraph &G,VertexType v)
{
	G.vexs[G.vexnum++] = v;
	int position = LocateVex(G,v);
	for(int i = 0; i < G.vexnum; i ++)
		G.arcs[position][i].adj = '*';
	for(int j = 0; j < G.vexnum; j ++)
		G.arcs[j][position].adj = '*';
	return 1;
}

Status DeleteVex(MGraph &G,VertexType v)
{
	int position,i,j;
	position = LocateVex(G,v);

	for(i = position+1;i < G.vexnum; i ++)
		G.vexs[i-1] = G.vexs[i];
	for(i = position+1; i < G.vexnum; i ++)
	   for(j = 0; j < G.vexnum; j ++)
		   G.arcs[i-1][j] = G.arcs[i][j];

	for(j = position+1; j < G.vexnum; j ++)
		for(i = 0; i < G.vexnum; i ++)
			G.arcs[i][j-1] = G.arcs[i][j];
	G.vexnum--;
	return 1;

}

Status DG_InsertArc(MGraph &G,VertexType v,VertexType w)
{
	int i,j;

	i = LocateVex(G,v);  j = LocateVex(G,w);
    if(i == -1 || j == -1)   return 0;
	else{
	    G.arcs[i][j].adj = '1';
	    return 1;
	}
	G.arcnum++;
}

Status DG_DeleteArc(MGraph &G,VertexType v,VertexType w)
{
	int i,j;

	i = LocateVex(G,v);
	j = LocateVex(G,w);

	G.arcs[i][j].adj = '*';
	G.arcnum--;
    return 1;
}

Status UDG_InsertArc(MGraph &G,VertexType v,VertexType w)
{
		int i,j;

	i = LocateVex(G,v);  j = LocateVex(G,w);
    if(i == -1 || j == -1)   return 0;
	else{
	    G.arcs[i][j].adj = '1';
        G.arcs[j][i].adj = '1';
	    return 1;
	}
	G.arcnum++;
}

Status UDG_DeleteArc(MGraph &G,VertexType v,VertexType w)
{
	int i,j;

	i = LocateVex(G,v);
	j = LocateVex(G,w);

	G.arcs[i][j].adj = '*';
	G.arcs[j][i].adj = '*';
	G.arcnum = G.arcnum - 2;
    return 1;
}

void Operation_InsertVex(MGraph &G)
{
    cout<<"请输入要插入的顶点信息:";
	VertexType data;
	cin>>data;
	InsertVex(G,data);
	PrintArcs(G);
}
 
void Operation_DeleteVex(MGraph &G)
{
      cout<<"请输入要删除的顶点:";
	  VertexType vex;
	  cin>>vex;
	  DeleteVex(G,vex);
	  PrintArcs(G);
}

void Operation_InsertArc(MGraph &G)
{
      cout<<"请输入要插入的弧的两个顶点:";
	  VertexType vex1,vex2;
	  cin>>vex1>>vex2;
	  DG_InsertArc(G,vex1,vex2);
      PrintArcs(G);
}

void Operation_DeleteArc(MGraph &G)
{
     
	cout<<"请输入删除的弧的顶点:";
	VertexType vex1,vex2;
	cin>>vex1>>vex2;
	DG_DeleteArc(G,vex1,vex2);
	PrintArcs(G);
}

void OperationGraph(MGraph &G)
{
	int step;

	while(step != EOF)
    {
		cout<<"----请选择图的操作:----"<<endl;
		cout<<"---1、插入顶点 2、删除顶点---"<<endl;
		cout<<"---3、插入弧   4、删除弧  ---"<<endl;
		cin>>step;
		switch(step)
		{
		case 1:
			Operation_InsertVex(G);
			break;
		case 2:
			Operation_DeleteVex(G);
			break;
		case 3:
			Operation_InsertArc(G);
			break;
		case 4:
			Operation_DeleteArc(G);
			break;
		}
	
	}
}

void main()
{
	MGraph Graph;
	//CreateGraph(map1);
	CreateDG(Graph);
    PrintArcs(Graph);
	DFSTraverse(Graph);
    BFSTraverse(Graph);
    OperationGraph(Graph);

}
